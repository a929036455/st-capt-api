// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 为某个枚举单独设置错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsTokenVerify(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOKEN_VERIFY.String() && e.Code == 401
}

func ErrorTokenVerify(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_TOKEN_VERIFY.String(), fmt.Sprintf(format, args...))
}

// session key 过期
func IsSessionKeyInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SESSION_KEY_INVALID.String() && e.Code == 499
}

// session key 过期
func ErrorSessionKeyInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(499, ErrorReason_SESSION_KEY_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsAuthChannelAppidIsRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTH_CHANNEL_APPID_IS_REQUIRED.String() && e.Code == 400
}

func ErrorAuthChannelAppidIsRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_AUTH_CHANNEL_APPID_IS_REQUIRED.String(), fmt.Sprintf(format, args...))
}

func IsLoginCodeIsInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOGIN_CODE_IS_INVALID.String() && e.Code == 400
}

func ErrorLoginCodeIsInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_LOGIN_CODE_IS_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsLoginUserNoNotEnough(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOGIN_USER_NO_NOT_ENOUGH.String() && e.Code == 402
}

func ErrorLoginUserNoNotEnough(format string, args ...interface{}) *errors.Error {
	return errors.New(402, ErrorReason_LOGIN_USER_NO_NOT_ENOUGH.String(), fmt.Sprintf(format, args...))
}

// 验证码错误
func IsSmsCodeIsInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SMS_CODE_IS_INVALID.String() && e.Code == 400
}

// 验证码错误
func ErrorSmsCodeIsInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_SMS_CODE_IS_INVALID.String(), fmt.Sprintf(format, args...))
}

// 密码不一致
func IsPasswordInconsistency(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_INCONSISTENCY.String() && e.Code == 400
}

// 密码不一致
func ErrorPasswordInconsistency(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PASSWORD_INCONSISTENCY.String(), fmt.Sprintf(format, args...))
}

// 用户名重复
func IsUsernameRepeat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USERNAME_REPEAT.String() && e.Code == 400
}

// 用户名重复
func ErrorUsernameRepeat(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USERNAME_REPEAT.String(), fmt.Sprintf(format, args...))
}

// 用户不存在
func IsUserDoesNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DOES_NOT_EXIST.String() && e.Code == 400
}

// 用户不存在
func ErrorUserDoesNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_DOES_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

// 密码错误
func IsPwdError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PWD_ERROR.String() && e.Code == 400
}

// 密码错误
func ErrorPwdError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PWD_ERROR.String(), fmt.Sprintf(format, args...))
}
