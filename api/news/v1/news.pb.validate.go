// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/news/v1/news.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetNewsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNewsRequestMultiError,
// or nil if none found.
func (m *GetNewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNewsRequestMultiError(errors)
	}

	return nil
}

// GetNewsRequestMultiError is an error wrapping multiple validation errors
// returned by GetNewsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewsRequestMultiError) AllErrors() []error { return m }

// GetNewsRequestValidationError is the validation error returned by
// GetNewsRequest.Validate if the designated constraints aren't met.
type GetNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewsRequestValidationError) ErrorName() string { return "GetNewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewsRequestValidationError{}

// Validate checks the field values on GetNewsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNewsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNewsReplyMultiError, or
// nil if none found.
func (m *GetNewsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewsId

	// no validation rules for CategoryId

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for Information

	// no validation rules for Image

	// no validation rules for Action

	// no validation rules for Sort

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetNewsReplyMultiError(errors)
	}

	return nil
}

// GetNewsReplyMultiError is an error wrapping multiple validation errors
// returned by GetNewsReply.ValidateAll() if the designated constraints aren't met.
type GetNewsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewsReplyMultiError) AllErrors() []error { return m }

// GetNewsReplyValidationError is the validation error returned by
// GetNewsReply.Validate if the designated constraints aren't met.
type GetNewsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewsReplyValidationError) ErrorName() string { return "GetNewsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetNewsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewsReplyValidationError{}

// Validate checks the field values on ListNewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNewsRequestMultiError, or nil if none found.
func (m *ListNewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListNewsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListNewsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNewsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for Id

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return ListNewsRequestMultiError(errors)
	}

	return nil
}

// ListNewsRequestMultiError is an error wrapping multiple validation errors
// returned by ListNewsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListNewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNewsRequestMultiError) AllErrors() []error { return m }

// ListNewsRequestValidationError is the validation error returned by
// ListNewsRequest.Validate if the designated constraints aren't met.
type ListNewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNewsRequestValidationError) ErrorName() string { return "ListNewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListNewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNewsRequestValidationError{}

// Validate checks the field values on ListNewsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListNewsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNewsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListNewsReplyMultiError, or
// nil if none found.
func (m *ListNewsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNewsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNewsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNewsReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNewsReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListNewsReplyMultiError(errors)
	}

	return nil
}

// ListNewsReplyMultiError is an error wrapping multiple validation errors
// returned by ListNewsReply.ValidateAll() if the designated constraints
// aren't met.
type ListNewsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNewsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNewsReplyMultiError) AllErrors() []error { return m }

// ListNewsReplyValidationError is the validation error returned by
// ListNewsReply.Validate if the designated constraints aren't met.
type ListNewsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNewsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNewsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNewsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNewsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNewsReplyValidationError) ErrorName() string { return "ListNewsReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListNewsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNewsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNewsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNewsReplyValidationError{}
