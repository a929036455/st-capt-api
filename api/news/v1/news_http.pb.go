// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.4
// source: api/news/v1/news.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNewsGetNews = "/api.news.v1.News/GetNews"
const OperationNewsListNews = "/api.news.v1.News/ListNews"

type NewsHTTPServer interface {
	GetNews(context.Context, *GetNewsRequest) (*GetNewsReply, error)
	ListNews(context.Context, *ListNewsRequest) (*ListNewsReply, error)
}

func RegisterNewsHTTPServer(s *http.Server, srv NewsHTTPServer) {
	r := s.Route("/")
	r.POST("/st-games/v1/news/get", _News_GetNews0_HTTP_Handler(srv))
	r.POST("/st-games/v1/news/list", _News_ListNews0_HTTP_Handler(srv))
}

func _News_GetNews0_HTTP_Handler(srv NewsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNewsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNewsGetNews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNews(ctx, req.(*GetNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNewsReply)
		return ctx.Result(200, reply)
	}
}

func _News_ListNews0_HTTP_Handler(srv NewsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNewsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNewsListNews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListNews(ctx, req.(*ListNewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNewsReply)
		return ctx.Result(200, reply)
	}
}

type NewsHTTPClient interface {
	GetNews(ctx context.Context, req *GetNewsRequest, opts ...http.CallOption) (rsp *GetNewsReply, err error)
	ListNews(ctx context.Context, req *ListNewsRequest, opts ...http.CallOption) (rsp *ListNewsReply, err error)
}

type NewsHTTPClientImpl struct {
	cc *http.Client
}

func NewNewsHTTPClient(client *http.Client) NewsHTTPClient {
	return &NewsHTTPClientImpl{client}
}

func (c *NewsHTTPClientImpl) GetNews(ctx context.Context, in *GetNewsRequest, opts ...http.CallOption) (*GetNewsReply, error) {
	var out GetNewsReply
	pattern := "/st-games/v1/news/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNewsGetNews))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NewsHTTPClientImpl) ListNews(ctx context.Context, in *ListNewsRequest, opts ...http.CallOption) (*ListNewsReply, error) {
	var out ListNewsReply
	pattern := "/st-games/v1/news/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNewsListNews))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
